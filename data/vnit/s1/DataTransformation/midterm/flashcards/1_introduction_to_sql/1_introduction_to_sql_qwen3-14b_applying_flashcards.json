[  
  {  
    "id": "integrated_apply_001",  
    "topic": "SQL Queries",  
    "bloom_level": "Applying",  
    "front_prompt": "Write an SQL query to retrieve the names of all students enrolled in 'Intro to Programming' from the Students, Courses, and Enrollment tables.",  
    "back_answer": "```sql\nSELECT E.StudentID, S.Name FROM Students S INNER JOIN Enrollment E ON S.StudentID = E.StudentID INNER JOIN Courses C ON E.CourseID = C.CourseID WHERE C.CourseName = 'Intro to Programming';\n``` Explanation: This query joins three tables using `INNER JOIN` on their respective keys and filters results where the course name matches 'Intro to Programming'."  
  },  
  {  
    "id": "integrated_apply_002",  
    "topic": "Table Design",  
    "bloom_level": "Applying",  
    "front_prompt": "Create an SQL statement to define a new table called 'Courses' with a primary key and a foreign key referencing the 'Departments' table.",  
    "back_answer": "```sql\nCREATE TABLE Courses (\n  CourseID VARCHAR(10) PRIMARY KEY,\n  CourseName VARCHAR(100),\n  DepartmentID VARCHAR(10),\n  FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)\n);\n``` Explanation: The `PRIMARY KEY` enforces uniqueness on `CourseID`, and the `FOREIGN KEY` constraint ensures valid department references from the 'Departments' table."  
  },  
  {  
    "id": "integrated_apply_003",  
    "topic": "Referential Integrity",  
    "bloom_level": "Applying",  
    "front_prompt": "Explain how to ensure referential integrity when deleting a department from the 'Departments' table that has related entries in the 'Courses' table.",  
    "back_answer": "Use `ON DELETE CASCADE` or `ON DELETE RESTRICT` in the foreign key definition. Example: Adding `FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID) ON DELETE CASCADE` automatically deletes dependent course records when a department is deleted, ensuring consistency."  
  },  
  {  
    "id": "integrated_apply_004",  
    "topic": "Data Retrieval",  
    "bloom_level": "Applying",  
    "front_prompt": "Write an SQL query to update the 'Major' of a student with StudentID = 101 in the Students table to 'Computer Science' and explain how this affects related tables.",  
    "back_answer": "```sql\nUPDATE Students SET Major = 'Computer Science' WHERE StudentID = 101;\n``` Explanation: This directly modifies the Students table. Since other tables (e.g., Enrollment) do not reference this field, no cascading effects occur. Referential integrity remains unaffected."  
  },  
  {  
    "id": "integrated_apply_005",  
    "topic": "Real-World Application",  
    "bloom_level": "Applying",  
    "front_prompt": "Describe a real-world scenario where foreign keys are critical for maintaining data accuracy.",  
    "back_answer": "In an e-commerce system, a 'Orders' table might have a foreign key referencing the 'Customers' table. This ensures that only valid customer IDs can be used in orders, preventing orphaned order records if a customer is deleted."  
  }  
]