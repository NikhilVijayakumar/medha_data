{
  "title": "Relational Database Design & SQL Synthesis - Feynman Follow-up Quiz",
  "description": "Deepen your understanding of database design principles and SQL optimization through conceptual transformations, simplifications, and mechanism explanations.",
  "type": "Feynman",
  "questions": [
    {
      "id": "feynman_q_001_related_to_primary_q_create_001_normalization_principles",
      "question": "Which analogy best explains why normalization (as in opt1) prevents data redundancy and anomalies?",
      "options": [
        { "id": "optA", "text": "Sorting books alphabetically in a library to make finding them easier." },
        { "id": "optB", "text": "Storing all student information, course details, and enrollment records in separate labeled boxes instead of mixing them in one box." },
        { "id": "optC", "text": "Using a spreadsheet where each row represents a single fact about students or courses." },
        { "id": "optD", "text": "Keeping your clothes folded neatly in drawers rather than throwing them into a pile on the floor." },
        { "id": "optE", "text": "Writing down the same phone number multiple times in different address books to ensure everyone has it." }
      ],
      "correctOptionIds": ["optB"],
      "explanation": "OptB captures normalization's core principle: separating related but distinct data into dedicated tables (boxes) prevents duplication and ensures each piece of information has a single, authoritative location. This avoids anomalies that occur when the same data is stored in multiple places."
    },
    {
      "id": "feynman_q_002_related_to_primary_q_create_002_sql_optimization",
      "question": "Explain like I'm 5: Why does rewriting a subquery as a JOIN (as in optA) make the query faster for large datasets?",
      "options": [
        { "id": "optX", "text": "It's like reading one storybook instead of flipping through multiple books to find the same page." },
        { "id": "optY", "text": "It's like having a helper who pre-sorts your toys so you don't have to search for them yourself." },
        { "id": "optZ", "text": "It's like using a magnifying glass to look at one part of a map instead of the whole map." },
        { "id": "optW", "text": "It's like building a tower with blocks where each block is connected to the one below it." },
        { "id": "optV", "text": "It's like having your friend repeat the same joke multiple times just so you can hear it better." }
      ],
      "correctOptionIds": ["optX"],
      "explanation": "OptX simplifies the concept: A JOIN combines data once at the beginning (reading one book), while subqueries repeatedly search for the same information across datasets (flipping through multiple books). This reduces redundant processing, especially with large tables."
    },
    {
      "id": "feynman_q_003_related_to_primary_q_create_003_null_handling",
      "question": "Which mechanism explanation clarifies why LEFT JOIN (optX) is necessary to include students with no grades?",
      "options": [
        { "id": "opt1", "text": "LEFT JOIN acts like a net that catches all students, even those without matching grade records." },
        { "id": "opt2", "text": "LEFT JOIN adds extra rows to the table where data is missing, filling them with zeros or blanks." },
        { "id": "opt3", "text": "LEFT JOIN ensures the query runs faster by skipping students who don't have grades." },
        { "id": "opt4", "text": "LEFT JOIN prevents errors by automatically converting NULL values to zero in calculations." },
        { "id": "opt5", "text": "LEFT JOIN is just another name for INNER JOIN but with slightly different syntax." }
      ],
      "correctOptionIds": ["opt1"],
      "explanation": "Opt1 correctly explains that LEFT JOIN preserves all records from the left table (Students) even if there are no matches in the right table (Grades). This ensures students without grades aren't excluded, unlike INNER JOIN which only returns matching pairs."
    }
  ]
}