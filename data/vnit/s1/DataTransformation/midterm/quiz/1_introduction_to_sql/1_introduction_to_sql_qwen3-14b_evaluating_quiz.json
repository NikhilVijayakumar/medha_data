{
  "title": "Relational Databases and SQL Evaluation Quiz",
  "description": "Evaluate key concepts in relational databases, RDBMS design, SQL efficiency, and core database terminology through scenario-based questions.",
  "type": "Evaluating",
  "questions": [
    {
      "id": "q_evaluate_001",
      "question": "A developer is designing a `Students` table for an educational institution. The table must support frequent searches by `StudentID` (primary key) and occasional queries filtering by `Major`. Which indexing strategy best balances performance and storage efficiency?",
      "options": [
        { "id": "opt1", "text": "Create a clustered index on `StudentID` and a non-clustered index on `Major`." },
        { "id": "opt2", "text": "Use only a clustered index on `Major` for faster filtering of majors." },
        { "id": "opt3", "text": "Cluster the table by `Major` to optimize sorting operations." },
        { "id": "opt4", "text": "Create non-clustered indexes on both `StudentID` and `Major`." },
        { "id": "opt5", "text": "Avoid indexes entirely to reduce overhead for small datasets." }
      ],
      "correctOptionIds": ["opt1"],
      "explanation": "A clustered index on the primary key (`StudentID`) ensures physical data storage aligns with lookup patterns, optimizing direct access. A non-clustered index on `Major` supports efficient filtering without reorganizing the table's physical structure. Other options either ignore primary key optimization (opt2), misalign indexes with usage patterns (opt3), or redundantly over-index (opt4)."
    },
    {
      "id": "q_evaluate_002",
      "question": "A team is normalizing a `Sales` table that contains redundant data about products and customers. The current design includes columns like `ProductID`, `ProductName`, `CustomerName`, and `Address`. Which normalization form should they aim for to eliminate redundancy while preserving efficient querying? (Select all that apply)",
      "options": [
        { "id": "optA", "text": "First Normal Form (1NF)" },
        { "id": "optB", "text": "Second Normal Form (2NF)" },
        { "id": "optC", "text": "Third Normal Form (3NF)" },
        { "id": "optD", "text": "Fourth Normal Form (4NF)" },
        { "id": "optE", "text": "Boyce-Codd Normal Form (BCNF)" }
      ],
      "correctOptionIds": ["optC"],
      "explanation": "Third Normal Form (3NF) eliminates transitive dependencies, ensuring non-key attributes depend only on the primary key. While 2NF removes partial dependencies, 3NF is necessary to fully address redundancy in this scenario. Higher forms like 4NF and BCNF are irrelevant unless dealing with multi-valued attributes or complex constraints."
    },
    {
      "id": "q_evaluate_003",
      "question": "Consider an SQL query joining `Students` and `Enrollments` tables using a LEFT JOIN on `StudentID`. Which of the following outcomes would indicate that this join type is appropriate? (Select all that apply)",
      "options": [
        { "id": "optX", "text": "The result includes all students, even those without enrollment records." },
        { "id": "optY", "text": "The query guarantees no duplicate rows in the output." },
        { "id": "optZ", "text": "It ensures referential integrity between tables by enforcing foreign key constraints." },
        { "id": "optAA", "text": "The result set contains only students who have enrolled in at least one course." },
        { "id": "optBB", "text": "It is suitable for counting total enrollments per student, including those with zero enrollments." }
      ],
      "correctOptionIds": ["optX", "optBB"],
      "explanation": "A LEFT JOIN preserves all rows from the left table (`Students`), even if no matches exist in `Enrollments`, which aligns with options X and BB. Option Y is incorrect because duplicates depend on data, not join type. Z refers to constraints, not joins. AA describes an INNER JOIN behavior."
    }
  ]
}