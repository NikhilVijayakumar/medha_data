{
  "title": "Relational Databases and SQL Evaluation - Feynman Follow-up Quiz",
  "description": "Deepen your understanding of relational databases, indexing strategies, normalization forms, and SQL joins with conceptually transformative questions grounded in the Feynman Technique.",
  "type": "Feynman",
  "questions": [
    {
      "id": "feynman_q_001_related_to_primary_q_evaluate_001_indexing_strategy",
      "question": "Imagine explaining why a clustered index on `StudentID` is optimal for the primary key to someone with no technical background. Which analogy best captures this concept?",
      "options": [
        { "id": "optA", "text": "It's like organizing books in a library alphabetically by title, making it easy to find any book instantly." },
        { "id": "optB", "text": "It's like arranging puzzle pieces so that each piece is stored exactly where it fits in the final picture." },
        { "id": "optC", "text": "It's like having a phone directory where names are listed in random order, but numbers are cross-referenced separately." },
        { "id": "optD", "text": "It's like sorting mail by ZIP code so letters to the same area are grouped together for efficient delivery." },
        { "id": "optE", "text": "It's like storing ingredients in a kitchen by how often they're used, not their type." }
      ],
      "correctOptionIds": ["optA"],
      "explanation": "The analogy of organizing books alphabetically (option A) reflects how clustered indexes physically store data in sorted order based on the key. This directly aligns with primary key access patterns where `StudentID` lookups need to be extremely efficient, unlike other options that misrepresent indexing mechanics."
    },
    {
      "id": "feynman_q_002_related_to_primary_q_evaluate_002_normalization_forms",
      "question": "A database contains a table with columns `CustomerID`, `CustomerName`, and `Address`. If this table is in 1NF but not 3NF, what real-world scenario best explains the redundancy issue? (Select all that apply)",
      "options": [
        { "id": "optX", "text": "A grocery store list where each item has multiple prices listed for different days." },
        { "id": "optY", "text": "An address book where the same phone number is repeated across multiple entries with minor typos." },
        { "id": "optZ", "text": "A class roster where student names are duplicated in every course they're enrolled in." },
        { "id": "optAA", "text": "A restaurant menu that lists 'Spaghetti' under both the Italian and Lunch categories with identical descriptions." },
        { "id": "optBB", "text": "A library catalog where book titles are repeated across different sections of the library." }
      ],
      "correctOptionIds": ["optAA"],
      "explanation": "The menu scenario (option AA) illustrates transitive dependency: 'Spaghetti' is described identically in multiple contexts, just as address or customer data might redundantly repeat if not normalized to 3NF. Other options represent different issues like duplication (Z), data inconsistency (Y), or multi-value attributes (X)."
    },
    {
      "id": "feynman_q_003_related_to_primary_q_evaluate_003_left_join_behavior",
      "question": "How would you explain the purpose of a LEFT JOIN to someone who has never used SQL, using only everyday objects? Select the most appropriate analogy.",
      "options": [
        { "id": "opt1", "text": "It's like looking up names in a phone book but still noting entries even if their number is missing." },
        { "id": "opt2", "text": "It's like pairing socks from two separate drawers, only keeping pairs that match exactly." },
        { "id": "opt3", "text": "It's like combining ingredients from different recipe books to create a new dish." },
        { "id": "opt4", "text": "It's like checking inventory in multiple warehouses and only listing items available in all of them." },
        { "id": "opt5", "text": "It's like creating a guest list that excludes anyone who hasn't RSVP'd yet." }
      ],
      "correctOptionIds": ["opt1"],
      "explanation": "The phone book analogy (option 1) perfectly captures LEFT JOIN behavior: preserving all entries from the left table (`Students`) even when no matching data exists in the right table (`Enrollments`). Other options describe INNER JOIN (2,4), UNION (3), or filtering (5)."
    }
  ]
}