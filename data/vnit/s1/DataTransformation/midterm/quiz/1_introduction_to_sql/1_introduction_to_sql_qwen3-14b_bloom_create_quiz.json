{  
  "title": "Relational Database Design & SQL Synthesis Quiz",  
  "description": "Design relational databases, synthesize SQL queries, and solve complex data modeling challenges requiring multi-concept integration.",  
  "type": "Creating",  
  "questions": [  
    {  
      "id": "q_create_001",  
      "question": "You are tasked with designing a database schema for a university system that tracks students, courses, and enrollments. To ensure **data integrity** and **efficient querying**, which of the following designs would you implement? (Select all correct answers)",  
      "options": [  
        { "id": "opt1", "text": "A `Students` table with StudentID as a primary key, a `Courses` table with CourseID as a primary key, and an `Enrollments` table linking them via foreign keys." },  
        { "id": "opt2", "text": "A single denormalized `StudentCourses` table containing all student details, course details, and enrollment dates in one table." },  
        { "id": "opt3", "text": "An `Enrollments` table with StudentID as a foreign key referencing Students.StudentID and CourseID as a foreign key referencing Courses.CourseID, but no primary key defined on Enrollments." },  
        { "id": "opt4", "text": "A `Courses` table with a composite primary key (DepartmentCode, CourseNumber), and an `Enrollments` table with a unique constraint on StudentID and CourseID to prevent duplicate enrollments." },  
        { "id": "opt5", "text": "An `Enrollments` table using triggers to enforce referential integrity instead of foreign key constraints for performance reasons." }  
      ],  
      "correctOptionIds": ["opt1", "opt4"],  
      "explanation": "The correct answers are **opt1** and **opt4**. Opt1 enforces normalization by separating entities (Students, Courses) and using foreign keys in Enrollments to maintain referential integrity. Opt4 ensures uniqueness of enrollments via a composite constraint while allowing efficient querying. Opt2 violates normalization principles and leads to redundancy. Opt3 lacks a primary key for the Enrollments table, risking data anomalies. Opt5 is poor practice as triggers complicate maintenance and do not guarantee atomicity or consistency."  
    },  
    {  
      "id": "q_create_002",  
      "question": "You are given this SQL query: `SELECT Name FROM Students WHERE Major IN (SELECT Major FROM Students GROUP BY Major HAVING COUNT(*) > 5)`. What is the **most accurate description** of what this query accomplishes, and how would you rewrite it using a JOIN for performance optimization in large datasets?",  
      "options": [  
        { "id": "optA", "text": "Retrieves names of students whose majors have more than 5 students. Optimized version: `SELECT s1.Name FROM Students s1 INNER JOIN (SELECT Major FROM Students GROUP BY Major HAVING COUNT(*) > 5) s2 ON s1.Major = s2.Major`." },  
        { "id": "optB", "text": "Retrieves names of students with a major that appears more than 5 times. Optimized version: `SELECT Name FROM Students WHERE Major IN (SELECT DISTINCT Major FROM Students GROUP BY Major HAVING COUNT(*) > 5)`." },  
        { "id": "optC", "text": "Retrieves names of all students who are in the top 5 most popular majors. Optimized version: `SELECT Name FROM Students WHERE Major = ANY (SELECT Major FROM Students GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 5)`." },  
        { "id": "optD", "text": "Retrieves names of students whose major has exactly 5 students. Optimized version: `SELECT s1.Name FROM Students s1 INNER JOIN (SELECT Major FROM Students GROUP BY Major HAVING COUNT(*) = 5) s2 ON s1.Major = s2.Major`." },  
        { "id": "optE", "text": "Retrieves names of students with a major that has at least one student. Optimized version: `SELECT Name FROM Students WHERE Major IN (SELECT Major FROM Students)`." }  
      ],  
      "correctOptionIds": ["optA"],  
      "explanation": "**OptA** is correct. The original query retrieves students in majors with more than 5 enrollments. Rewriting it with a JOIN (as in optA) improves performance on large datasets by avoiding repeated subquery execution. OptB incorrectly uses DISTINCT, which doesnâ€™t affect the result but adds overhead. OptC misinterprets the requirement as 'top 5' instead of 'majors with >5 students'. OptD changes the condition to =5, and optE is trivially true for all students."  
    },  
    {  
      "id": "q_create_003",  
      "question": "You are tasked with designing an SQL query to **calculate the average grade per student** from a `Grades` table containing StudentID, CourseID, and Grade columns. However, you must ensure that students who have **no grades recorded** (e.g., new students) still appear in the output with a NULL or 0 value. Which approach would achieve this requirement using only SQL constructs? (Select all correct answers)",  
      "options": [  
        { "id": "optX", "text": "Use `LEFT JOIN` between Students and Grades, then apply `COALESCE(AVG(Grade), 0)`." },  
        { "id": "optY", "text": "Use a subquery with `GROUP BY StudentID` on the Grades table, then `RIGHT JOIN` to the Students table." },  
        { "id": "optZ", "text": "Use `FULL OUTER JOIN` between Students and Grades, but this is not supported in all SQL dialects like MySQL." },  
        { "id": "optW", "text": "Use a CTE with `GROUP BY StudentID` on the Grades table, then use `COALESCE` to replace NULLs with 0 in the final SELECT." },  
        { "id": "optV", "text": "Use `INNER JOIN` between Students and Grades, but filter out students with no grades using a WHERE clause." }  
      ],  
      "correctOptionIds": ["optX", "optY", "optZ"],  
      "explanation": "**OptX**, **OptY**, and **OptZ** are correct. OptX uses LEFT JOIN to include all students, then COALESCE handles NULL averages. OptY achieves the same with a RIGHT JOIN after grouping grades (though less common). OptZ is valid in dialects supporting FULL OUTER JOIN. OptW incorrectly applies COALESCE on grouped results, which would not handle missing students. OptV excludes unenrolled students entirely."  
    }  
  ]  
}